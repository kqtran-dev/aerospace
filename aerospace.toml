# 'start-at-login' needs to be 'true' for 'after-login-command' to work
# Available commands: https://nikitabobko.github.io/AeroSpace/commands
after-login-command = []

# You can use it to add commands that run after AeroSpace startup.
# 'after-startup-command' is run after 'after-login-command'
# Available commands : https://nikitabobko.github.io/AeroSpace/commands
after-startup-command = [
      'exec-and-forget brew services start borders'
]

# Start AeroSpace at login
start-at-login = true

# Normalizations. See: https://nikitabobko.github.io/AeroSpace/guide#normalization
enable-normalization-flatten-containers = true
enable-normalization-opposite-orientation-for-nested-containers = true

# See: https://nikitabobko.github.io/AeroSpace/guide#layouts
# The 'accordion-padding' specifies the size of accordion padding
# You can set 0 to disable the padding feature
accordion-padding = 100
default-root-container-layout = 'tiles'
default-root-container-orientation = 'auto'
on-focused-monitor-changed = ['move-mouse monitor-lazy-center']
automatically-unhide-macos-hidden-apps = false # setting to false because this is how I use numi


# Possible values: (qwerty|dvorak|colemak)
# See https://nikitabobko.github.io/AeroSpace/guide#key-mapping
[key-mapping]
preset = 'qwerty'

# Gaps between windows (inner-*) and between monitor edges (outer-*).
# Possible values:
# - Constant:     gaps.outer.top = 8
# - Per monitor:  gaps.outer.top = [{ monitor.main = 16 }, { monitor."some-pattern" = 32 }, 24]
#                 In this example, 24 is a default value when there is no match.
#                 Monitor pattern is the same as for 'workspace-to-monitor-force-assignment'.
#                 See:
#                 https://nikitabobko.github.io/AeroSpace/guide#assign-workspaces-to-monitors
[gaps]
inner.horizontal = 8
inner.vertical =   8
outer.left =       8
outer.bottom =     8
outer.top =        8
outer.right =      8

# 'main' binding mode declaration
# See: https://nikitabobko.github.io/AeroSpace/guide#binding-modes
# 'main' binding mode must be always presented
# Fallback value (if you omit the key): mode.main.binding = {}
[mode.main.binding]
alt-slash = 'layout tiles horizontal vertical'
alt-comma = 'layout accordion horizontal vertical'

# See: https://nikitabobko.github.io/AeroSpace/commands#focus
alt-h = 'focus left'
alt-j = 'focus down'
alt-k = 'focus up'
alt-l = 'focus right'

# See: https://nikitabobko.github.io/AeroSpace/commands#move
alt-shift-h = 'move left'
alt-shift-j = 'move down'
alt-shift-k = 'move up'
alt-shift-l = 'move right'

# See: https://nikitabobko.github.io/AeroSpace/commands#resize
alt-minus = 'resize smart -50'
alt-equal = 'resize smart +50'

# See: https://nikitabobko.github.io/AeroSpace/commands#workspace
alt-1 = 'workspace 1'
alt-2 = 'workspace 2'
alt-3 = 'workspace 3'
alt-4 = 'workspace 4'
alt-5 = 'workspace 5'
alt-a = 'workspace A'
alt-b = 'workspace B'
alt-c = 'workspace C'
alt-d = 'workspace D'
alt-e = 'workspace E'
alt-f = 'workspace F'
alt-g = 'workspace G'
alt-i = 'workspace I'
# alt-m = [
#     'workspace 1',
#     'exec-and-forget open -n /Applications/Ghostty.app /opt/homebrew/bin/tmux attach -t aerc'
# ]
# cmd-enter = ['exec-and-forget open -n /Applications/Ghostty.app /opt/homebrew/bin/tmux attach -t arc']
# alt-m = 'workspace M'
alt-n = 'workspace N'
alt-o = 'workspace O'
alt-p = 'workspace P'
alt-q = 'workspace Q'
alt-r = 'workspace R'
alt-s = 'workspace S'
alt-t = 'workspace T'
alt-u = 'workspace U'
alt-v = 'workspace V'
alt-w = 'workspace W'
alt-x = 'workspace X'
alt-y = 'workspace Y'
# alt-z = 'workspace Z'

# See: https://nikitabobko.github.io/AeroSpace/commands#move-node-to-workspace
alt-shift-1 = 'move-node-to-workspace 1'
alt-shift-2 = 'move-node-to-workspace 2'
alt-shift-3 = 'move-node-to-workspace 3'
alt-shift-4 = 'move-node-to-workspace 4'
alt-shift-5 = 'move-node-to-workspace 5'
alt-shift-a = 'move-node-to-workspace A'
alt-shift-b = 'move-node-to-workspace B'
alt-shift-c = 'move-node-to-workspace C'
alt-shift-d = 'move-node-to-workspace D'
alt-shift-e = 'move-node-to-workspace E'
alt-shift-f = 'move-node-to-workspace F'
alt-shift-g = 'move-node-to-workspace G'
alt-shift-i = 'move-node-to-workspace I'
# alt-shift-m = 'move-node-to-workspace M'
alt-shift-n = 'move-node-to-workspace N'
alt-shift-o = 'move-node-to-workspace O'
alt-shift-p = 'move-node-to-workspace P'
alt-shift-q = 'move-node-to-workspace Q'
alt-shift-r = 'move-node-to-workspace R'
alt-shift-s = 'move-node-to-workspace S'
alt-shift-t = 'move-node-to-workspace T'
alt-shift-u = 'move-node-to-workspace U'
alt-shift-v = 'move-node-to-workspace V'
alt-shift-w = 'move-node-to-workspace W'
alt-shift-x = 'move-node-to-workspace X'
alt-shift-y = 'move-node-to-workspace Y'
# alt-shift-z = 'move-node-to-workspace Z'

# See: https://nikitabobko.github.io/AeroSpace/commands#workspace-back-and-forth
alt-tab = 'workspace-back-and-forth'
# See: https://nikitabobko.github.io/AeroSpace/commands#move-workspace-to-monitor
alt-shift-tab = 'move-workspace-to-monitor --wrap-around next'

# See: https://nikitabobko.github.io/AeroSpace/commands#mode
alt-shift-semicolon = 'mode service'

cmd-h = [] # Disable "hide application"
cmd-alt-h = [] # Disable "hide others"
# bi:d uparrow to fullscreen
alt-shift-up = 'fullscreen'

[mode.service.binding]
f = ['layout floating tiling', 'mode main'] # Toggle between floating and tiling layout
shift-r = [
    'reload-config',
    'exec-and-forget brew services restart borders', # fixes jankyborders if they were resized
    '''exec-and-forget osascript -e 'display notification "Reloaded config" with title "AeroSpace"' ''',
    'mode main'
]

alt-shift-h = ['join-with left', 'mode main']
alt-shift-j = ['join-with down', 'mode main']
alt-shift-k = ['join-with up', 'mode main']
alt-shift-l = ['join-with right', 'mode main']

[mode.main]

## dev
[[on-window-detected]]
if.app-id = 'com.mitchellh.ghostty'
run = "move-node-to-workspace 1"

## finder
[[on-window-detected]]
if.app-id = 'com.apple.finder'
run = "move-node-to-workspace E"

[[on-window-detected]]
if.app-id = 'com.hnc.Discord'
run = "move-node-to-workspace C"

[[on-window-detected]]
if.app-id = 'com.apple.MobileSMS'
run = "move-node-to-workspace C"

[[on-window-detected]]
if.app-id = 'com.valvesoftware.steam.helper'
# if.window-title-regex-substring = 'notificationtoasts_46_desktop'
if.window-title-regex-substring = '^notificationtoasts.*'
check-further-callbacks = true
run = ["layout floating"]

[[on-window-detected]]
if.app-id = 'com.valvesoftware.steam.helper'
if.window-title-regex-substring = '.*Chat$'
check-further-callbacks = true
run = ["layout tiling", "move-node-to-workspace C"]

[[on-window-detected]]
if.app-id = 'org.mozilla.firefox'
if.window-title-regex-substring = 'Library'
if.workspace = 'W'
check-further-callbacks = true
run = ["layout floating"]

[[on-window-detected]]
if.app-id = 'org.mozilla.firefox'
if.window-title-regex-substring = '^Extension:.*'
if.workspace = 'W'
check-further-callbacks = true
run = ["layout floating"]

[[on-window-detected]]
if.app-id = 'org.mozilla.firefox'
run = "move-node-to-workspace W"

[[on-window-detected]]
if.app-id = 'md.obsidian'
run = "move-node-to-workspace W"

[[on-window-detected]]
if.app-id = 'com.microsoft.Outlook'
run = 'move-node-to-workspace 2'

## move remaining windows to a general workspace
[[on-window-detected]]
check-further-callbacks = true
run = [
    "layout floating"
    # , "move-node-to-workspace 1" -- leave this out because it keeps catching Steam notifications that are not named yet
]

